Ext.data.JsonP.charting({"title": "Charting", "guide": "<h1>Charts</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/charting-section-1'>Creating a Simple Chart</a></li>\n<li><a href='#!/guide/charting-section-2'>Themes</a></li>\n<li><a href='#!/guide/charting-section-3'>Coding an Ext JS Chart</a></li>\n<li><a href='#!/guide/charting-section-4'>Creating and defining the Model and Store (data)</a></li>\n<li><a href='#!/guide/charting-section-5'>Creating and defining the Chart</a></li>\n<li><a href='#!/guide/charting-section-6'>Creating and defining the Axes</a></li>\n<li><a href='#!/guide/charting-section-7'>Customizing the Chart's Theme</a></li>\n<li><a href='#!/guide/charting-section-8'>Using Sencha Architect to Implement Charts</a></li>\n</ol>\n</div>\n\n<p>Charts are used to present data visually,\nusually showing the relationship between different parts of the data.</p>\n\n<p>The chart classes use the surfaces and sprites developed with\n<a href=\"#!/guide/drawing\">the drawing package</a>.\nThis means they are implemented using\nstandard graphics libraries: SVG, Microsoft VML, or HTML5 Canvas.</p>\n\n<p>Every chart must have three components: data, axes, and series.</p>\n\n<p><strong>Data</strong> is the information to be depicted in the chart.\nFor the Sencha frameworks,\nthis is represented using the standard Model/Store paradigm.</p>\n\n<p><strong>Axes</strong> provide the origin, range, scale, and units of the data.\nform the basic \"infrastructure\" of the chart.\nAxes can be Cartesian (x,y), Polar (or radial)\nor Gauge (one-dimensional axis used for a gauge chart).\nMost charts use one set of axes\nalthough a chart that combines multiple types of series\nmay require additional axes definitions.</p>\n\n<p><strong>Series</strong> is the term used for the graphical rendering of the data.\nIn other words, these are the essential graphical item(s)\nin a chart such as a line, bars, columns, or the pie.\nOne chart may include several series.\nFor example, a chart with three lines on it\ncontains three independent line series.\nanother chart might include three bar series\nplus a line series.</p>\n\n<p>Additional facilities let you add labels, markers, and legends to a Chart;\ndo animations so that Chart elements\n(bars, columns, lines, pie slices)\nmove rather than sitting statically on the display;\nand zoom in on a section of a series to show more detail.</p>\n\n<ul>\n<li><p>A <strong>label</strong> gives explanatory titles for an axis or a series.</p></li>\n<li><p>A <strong>marker</strong> is a symbol, shape, or picture that is used\nto plot a data point in a series.</p></li>\n<li><p>A <strong>legend</strong> provides a key to the chart,\nidentifying the the variables in the chart\nand how they are represented.</p></li>\n<li><p><strong>listeners</strong> are software that wait for and act on\nactions such as mouse events on the desktop\nand tap events on touchscreen devices.</p></li>\n<li><p><strong>animation</strong> -- is movement that is applied to chart elements.</p></li>\n</ul>\n\n\n<p>See the <a href=\"http://docs.sencha.com/products/extjs/#!/sample-4\">Charts examples</a>\nfor a quick overview of the sorts of charts that can be implemented\nwith the Charting APIs.\nWe will refer to these examples frequently in this guide;\nyou can see what each chart looks like\nand then view the code used to produce the chart.\nNote the following:</p>\n\n<ul>\n<li>These examples work best when your browser's zoom\nis set to 100% or less.\nIf you click on an example and the chart overlays the text,\nreset the zoom ration on your browser\nand reload the example chart.</li>\n<li>All Ext JS examples include a drop-down menu\nthat allows you to see the effect of different themes.\nThese are the standard CSS themes\nthat do not apply directly to the charting components.\nHowever, some of the Chart examples\nare implemented on an Ext JS container\nthat IS affected by the CSS themes.\nYou will note especially that charts\nusing the default (transparent) background\nmay look quite different displayed on the Accessibility or Aria\nCSS Theme (which have a black background)\nwhereas charts that are styled to have a white (#fff) background\nstill have that white background when displayed\non a black CSS Theme background.</li>\n</ul>\n\n\n<p>Colors use an HTML color code that defines the color to be used.\nColors are defined by their red-green-blue makeup;\nthe code can be #rgb for 16-bit codes\nor #rrggbb for 256-bit codes;\nfor example, #317040 or #374 represent dark greens.\nSee the <a href=\"http://www.w3schools.com/html/html_colornames.asp\">Color Names</a>\nweb page for a chart that shows names for common colors\nthat are supported by all browsers\nor use the <a href=\"http://html-color-codes.info\">HTML Color Codes</a> web page\nto find the color code you want.\nThe latter page also includes useful hints\nsuch as colors that work well on all operating systems\nand colors that are safe for color blindness.</p>\n\n<p>Text is used many ways in charts --\nin legends, as labels, and so forth.\nText should be entered as a string;\nyou can specify stylings such as font, size, margins, and colors\nwith the coding for the chart component.\nIn some cases, HTML text may work\nbut it is less robust and Sencha does not guarantee\nthat HTML text will work in future releases.</p>\n\n<h2 id='charting-section-1'>Creating a Simple Chart</h2>\n\n<p>Every chart has at least three key and independent parts:</p>\n\n<ul>\n<li>a <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Model</a> that describes the data\nand a <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Store</a> that contains the data.\nThe data displayed in the chart is automatically updated\nwhenever the data in the Store changes.</li>\n<li>an array of <a href=\"#!/api/Ext.chart.axis.Axis\" rel=\"Ext.chart.axis.Axis\" class=\"docClass\">Axes</a>\nthat define the boundaries of the chart.</li>\n<li>one or more <a href=\"#!/api/Ext.chart.series.Series\" rel=\"Ext.chart.series.Series\" class=\"docClass\">Series</a>\nto handle the visual rendering of the data points.\nOne chart can have a number of Series,\nsharing the axes.</li>\n</ul>\n\n\n<p>To create a simple chart, you must:</p>\n\n<ol>\n<li>Define a Model and create a Store</li>\n<li>Define the chart and provide basic configuration information,\nwhich includes binding the chart to the Store.</li>\n<li>Define the axes for the chart.</li>\n<li>Define the Series for the chart.</li>\n</ol>\n\n\n<h3>Defining a Model and Creating a Store</h3>\n\n<p>The first step is to create a <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Model</a>\nthat represents the type of\ndata that will be displayed in the chart.\nFor example, the data for a chart that displays a weather forecast\ncould be represented as a series of \"WeatherPoint\" data points\nwith two fields - \"temperature\", and \"date\":</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('WeatherPoint', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: [\n         { name: 'temperature', type: 'int' }\n         { name: 'date' }\n    ]\n});\n</code></pre>\n\n<p>Note that <code>type: 'int'</code> is specified for each field;\nthis is not always necessary but is recommended.</p>\n\n<p>Next, create a <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Store</a>.\nThe Store contains a collection of \"WeatherPoint\" Model instances.\nThe data could be loaded dynamically,\nbut for sake of ease this example uses inline data:</p>\n\n<pre><code>var store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    model: 'WeatherPoint',\n    data: [\n        { temperature: 58, date: new Date(2013, 1, 1, 8) },\n        { temperature: 63, date: new Date(2013, 1, 1, 9) },\n        { temperature: 73, date: new Date(2013, 1, 1, 10) },\n        { temperature: 78, date: new Date(2013, 1, 1, 11) },\n        { temperature: 81, date: new Date(2013, 1, 1, 12) }\n    ]\n});\n</code></pre>\n\n<p>For additional information about Models and Stores,\nplease refer to the <a href=\"#!/guide/data\">Data Guide</a>.</p>\n\n<h3>2. Creating the Chart object</h3>\n\n<p>Now that a Store has been created it can be used in a Chart:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.chart.Chart\" rel=\"Ext.chart.Chart\" class=\"docClass\">Ext.chart.Chart</a>', {\n   renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n   width: 400,\n   height: 300,\n   store: store\n});\n</code></pre>\n\n<p>This defines the width and height of the chart (in pixels)\nand specifies that the chart is rendered to the current document body\na returned by <strong><a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a></strong>.\nAny specifications that can be used in a layout can be used here; see\n<a href=\"#!/guides/layouts_and_containers\">Layouts and Containers</a>\nfor more information.</p>\n\n<p>That is all it takes to create a Chart instance that is backed by a Store.\nHowever, if the above code is run in a browser,\na blank screen is displayed.\nThis is because the two pieces that are responsible for the visual display --\nthe Chart's <a href=\"#!/api/Ext.chart.Chart-cfg-axes\" rel=\"Ext.chart.Chart-cfg-axes\" class=\"docClass\">axes</a> and\n<a href=\"#!/api/Ext.chart.Chart-cfg-series\" rel=\"Ext.chart.Chart-cfg-series\" class=\"docClass\">series</a> --\nhave not yet been defined.</p>\n\n<h3>3. Configuring the Axes</h3>\n\n<p><a href=\"#!/api/Ext.chart.axis.Axis\" rel=\"Ext.chart.axis.Axis\" class=\"docClass\">Axes</a> are the lines\nthat define the boundaries of the data points\nthat a Chart can display.\nThis chart uses the standard Cartesian axes\nwith the y axis defined as the Numeric type\nand the x axis defined as the Time type,\nwhich is a special type of Numeric type\nthat renders the numeric values as human-readable dates.\nThe vertical (left position) \"y\" axis is defined first\nand has the title \"Temperature\";\nthe horizontal (bottom position) \"x\" axis is defined second\nand has the title \"Time\":</p>\n\n<pre><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.chart.Chart\" rel=\"Ext.chart.Chart\" class=\"docClass\">Ext.chart.Chart</a>', {\n    ...\n    axes: [\n        {\n            title: 'Temperature',\n            type: 'Numeric',\n            position: 'left',\n            fields: ['temperature'],\n            minimum: 0,\n            maximum: 100\n        },\n        {\n            title: 'Time',\n            type: 'Time',\n            position: 'bottom',\n            fields: ['date'],\n            dateFormat: 'ga'\n        }\n    ]\n});\n</code></pre>\n\n<p>The \"Temperature\" axis is a vertical\n<a href=\"#!/api/Ext.chart.axis.Numeric\" rel=\"Ext.chart.axis.Numeric\" class=\"docClass\">Numeric Axis</a>\nand is positioned on the left edge of the Chart.\nIt represents the bounds of the data contained\nin the \"WeatherPoint\" Model's \"temperature\" field\nthat was defined above.\nThe minimum value for this axis is 0, and the maximum is 100.\nBy defining the minimum value as 0,\nyou ensure that the scale is displayed beginning at 0\neven if the lowest temperature reported is above 0.</p>\n\n<p>The horizontal axis is a <a href=\"#!/api/Ext.chart.axis.Time\" rel=\"Ext.chart.axis.Time\" class=\"docClass\">Time Axis</a>\nand is positioned on the bottom edge of the Chart.\nIt represents the bounds of the data\ncontained in the \"WeatherPoint\" Model's \"date\" field.\nThe <a href=\"#!/api/Ext.chart.axis.Time-cfg-dateFormat\" rel=\"Ext.chart.axis.Time-cfg-dateFormat\" class=\"docClass\">dateFormat</a>\nconfiguration tells the Time Axis how to format its labels.</p>\n\n<p>Here's what the Chart looks like now that it has its Axes configured:</p>\n\n<p><p><img src=\"guides/charting/Ext.chart.Chart1.png\" alt=\"Chart Axes\"></p></p>\n\n<h3>4. Configuring the Series</h3>\n\n<p>The final step in creating a simple Chart\nis to configure one or more <a href=\"#!/api/Ext.chart.series.Series\" rel=\"Ext.chart.series.Series\" class=\"docClass\">Series</a>.\nSeries are responsible for the visual representation\nof the data points contained in the Store.\nThis example only has one Series;\nthe \"...\" strings here are the content described above:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.chart.Chart\" rel=\"Ext.chart.Chart\" class=\"docClass\">Ext.chart.Chart</a>', {\n    ...\n    axes: [\n        ...\n    ],\n    series: [\n        {\n            type: 'line',\n            xField: 'date',\n            yField: 'temperature'\n        }\n    ]\n});\n</code></pre>\n\n<p>This Series is a <a href=\"#!/api/Ext.chart.series.Line\" rel=\"Ext.chart.series.Line\" class=\"docClass\">Line Series</a>,\nand it uses the \"date\" and \"temperature\" fields\nfrom the \"WeatherPoint\" Models in the Store to plot its data points\non the axes defined above:</p>\n\n<p><p><img src=\"guides/charting/Ext.chart.Chart2.png\" alt=\"Line Series\"></p></p>\n\n<p>See the <a href=\"#!/example/charts/Line.html\">Line Charts Example</a> for a live demo\nof a more complex line chart\nthat includes multiple line Series and animations.</p>\n\n<h2 id='charting-section-2'>Themes</h2>\n\n<p>A <a href=\"#!/api/Ext.chart.Chart-cfg-theme\" rel=\"Ext.chart.Chart-cfg-theme\" class=\"docClass\">theme</a> can be defined for a chart\nto control the style and formatting of the chart.\nThe same effects can be achieved with style configurations\nfor the various components\nbut a theme combines a set of style elements\ninto a package that can be applied to other charts.\nYou can define a full theme that includes many styling elements\nand then include the name of that style for the chart.\nMore often, the <a href=\"#!/api/Ext.chart.Chart-cfg-theme\" rel=\"Ext.chart.Chart-cfg-theme\" class=\"docClass\">theme</a> configuration option\nis used to easily change the color of the chart; for example`:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.chart.Chart\" rel=\"Ext.chart.Chart\" class=\"docClass\">Ext.chart.Chart</a>', {\n    ...\n    theme: 'Green',\n    ...\n});\n</code></pre>\n\n<p><p><img src=\"guides/charting/Ext.chart.Chart3.png\" alt=\"Green Theme\"></p></p>\n\n<h2 id='charting-section-3'>Coding an Ext JS Chart</h2>\n\n<p>The basic structure of an Ext JS Chart is:</p>\n\n<pre><code>var chart = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.chart.Chart\" rel=\"Ext.chart.Chart\" class=\"docClass\">Ext.chart.Chart</a>', {\n    // Definitions for the Chart, including the data Store\n\n    axes: [{\n        // Definitions for the first Axis\n    }, {\n        // Definitions for the second Axis (if any)\n       }\n    }],\n\n    series: [{\n        // Definitions for the first Series\n    }]\n    series: [{\n        // Definitions for the second Series (if any)\n    }]\n    series: [{\n        // Definitions for additional Series (if any)\n    }]\n});\n</code></pre>\n\n<h2 id='charting-section-4'>Creating and defining the Model and Store (data)</h2>\n\n<p>Charts use the standard Model and Store data architecture\nused for the rest of the application.\nThis is discussed in the <a href=\"#!/guide/data\">Data Guide</a>.</p>\n\n<p>Some of the sample charts define date inline;\nwhile this is not how one typically writes ones application,\nit provides a useful reference.  For example, see the\n<a href=\"/Users/meg/SDK/extjs/docs/guides/charting_new\">Custom Area Chart</a>.</p>\n\n<h2 id='charting-section-5'>Creating and defining the Chart</h2>\n\n<pre><code><a href=\"#!/api/Ext-method-onReady\" rel=\"Ext-method-onReady\" class=\"docClass\">Ext.onReady</a>(function   ()  {\n   var chart = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.chart.Chart\" rel=\"Ext.chart.Chart\" class=\"docClass\">Ext.chart.Chart</a>', {\n       renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n       width: 800,\n       height: 600,\n       animate: true,\n       store: store,\n       legend: {\n           position: 'bottom'\n       },\n    }\n }\n</code></pre>\n\n<p>This is a basic, minimal definition of a chart --\nit defines the width and height of the chart (in pixels),\nand binds to the Store that is used for the data\nused in the chart.</p>\n\n<p>The <code><a href=\"#!/api/Ext-method-onReady\" rel=\"Ext-method-onReady\" class=\"docClass\">Ext.onReady</a>(function ()</code> class\nshould always be called before rendering the Chart.\nThe <code>function</code> callback is called when the DOM is ready\nand all required classes have been loaded,\nso this prevents problems that can occur\nwhen the code attempts to render a Chart\nbefore everything is in place.</p>\n\n<p><code><a href=\"#!/api/Ext-method-require\" rel=\"Ext-method-require\" class=\"docClass\">Ext.require</a></code> statements are often included\nbefore the <code><a href=\"#!/api/Ext-method-onReady\" rel=\"Ext-method-onReady\" class=\"docClass\">Ext.onReady</a></code> call;\nfor example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-require\" rel=\"Ext-method-require\" class=\"docClass\">Ext.require</a>('Ext.chart.*');\n<a href=\"#!/api/Ext-method-require\" rel=\"Ext-method-require\" class=\"docClass\">Ext.require</a>([\n    '<a href=\"#!/api/Ext.window.Window\" rel=\"Ext.window.Window\" class=\"docClass\">Ext.Window</a>',\n    '<a href=\"#!/api/Ext.fx.target.Sprite\" rel=\"Ext.fx.target.Sprite\" class=\"docClass\">Ext.fx.target.Sprite</a>',\n    '<a href=\"#!/api/Ext.layout.container.Fit\" rel=\"Ext.layout.container.Fit\" class=\"docClass\">Ext.layout.container.Fit</a>',\n    '<a href=\"#!/api/Ext.window.MessageBox\" rel=\"Ext.window.MessageBox\" class=\"docClass\">Ext.window.MessageBox</a>'\n]);\n</code></pre>\n\n<p>This ensures that the classes required for the chart\nare rendered before the chart itself is rendered.</p>\n\n<p>The <code>renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()</code> line\nis described on the\n<a href=\"http://docs.sencha.com/ext-js/4-2/#!/api/Ext.AbstractComponent\">Ext.AbstractComponent</a>\npage.\nIt specifies the element to which the chart will be rendered.</p>\n\n<h2 id='charting-section-6'>Creating and defining the Axes</h2>\n\n<p>The Axes form the basic structure of the Chart.\nMost commonly, this is the Cartesian (x,y) axes scheme,\nwith numerical values represented on the y (vertical) axis\nand either numerical or categorical information\nrepresented on the x (horizontal axis).\nCartesian axes are used for line, bar, area, and column charts.</p>\n\n<p>Pie, radar, and scatter charts use polar (or radial) axes.\nFor a simplified view, think of polar axes in terms of a virtual circle;\nthe radius of the circle is the x axis\nand the curved arc forming the outside of the circle\n(or some portion thereof) is the y axis.</p>\n\n<p>A gauge axis is a one-dimensional axis\nthat is used for a gauge chart,\nwhich reports a single set of values.</p>\n\n<p><a href=\"#!/api/Ext.chart.axis.Axis\" rel=\"Ext.chart.axis.Axis\" class=\"docClass\">Ext.chart.axis.Axis</a> is the main Axis class.\nThe Ext JS Charting classes identify four types of axes:</p>\n\n<ul>\n<li><strong>Category</strong> -- axis that plots\nnon-numerical categories of information.\nSee <a href=\"#!/api/Ext.chart.axis.Category\" rel=\"Ext.chart.axis.Category\" class=\"docClass\">Ext.chart.axis.Category</a>.</li>\n<li><strong>Numerical</strong> -- axis that plots numerical values.\nSee <a href=\"#!/api/Ext.chart.axis.Numeric\" rel=\"Ext.chart.axis.Numeric\" class=\"docClass\">Ext.chart.axis.Numeric</a>.</li>\n<li><strong>Time</strong> -- a subclass of Numerical Axes,\nthat plots consistent and equal time intervals.\nThis is a pure linear Numeric axis\nwith a custom rendering of the values\nas human-readable dates.\nSee <a href=\"#!/api/Ext.chart.axis.Time\" rel=\"Ext.chart.axis.Time\" class=\"docClass\">Ext.chart.axis.Time</a>.</li>\n<li><strong>Gauge</strong> -- a one-dimensional axis for gauge charts\nthat display a single set of values.\nSee <a href=\"#!/api/Ext.chart.axis.Gauge\" rel=\"Ext.chart.axis.Gauge\" class=\"docClass\">Ext.chart.axis.Gauge</a>.</li>\n</ul>\n\n\n<p>Note that many charts that plot some set of values against date/time information\nuse Category axes rather than Time axes\nbecause they do not have consistent time intervals.\nThis happens most commonly in charts that report financial activity,\nsuch as hourly stock values.\nBecause markets close at night and for weekends and holidays,\nthe time intervals are inconsistent\nand a Numeric line chart (for example)\nwould have inappropriate flat segments\nfor times when markets are closed.</p>\n\n<p>The basic config for a Chart using Cartesian axes is:</p>\n\n<pre><code>axes: [{\n    type: 'Numeric',\n    position: 'left',\n    fields: ['data1', 'data2', 'data3'],\n    title: 'Number of Hits',\n    minimum: 0,\n    adjustMinimumByMajorUnit: 0\n}, {\n    type: 'Category',\n    position: 'bottom',\n    fields: ['name'],\n    title: 'Month of the Year',\n    grid: true,\n    label: {\n        rotate: {\n            degrees: 315\n        }\n    }\n}],\n</code></pre>\n\n<p>The defines the left (y) axis to be a Numeric axis\nwith the fields <code>\"data1\"</code>, <code>\"data2\"</code>, and <code>\"data3\"</code> displayed;\nthese should be fields defined in the Model for the graph.\n<code>minimum: 0</code> makes the y axis start counting at 0\nno matter what the minimum value of the fields is;\nthis is what one normally expects to see on a graph.</p>\n\n<p>The <code>adjustMinimumByMajorUnit</code> config is set to true,\nso the minimum value is extended\nbeyond the data's maximum to the nearest <code>majorUnit</code>.</p>\n\n<p>The bottom (x) axis is defined as a Category axis.\nThe title of the axis is \"Month of the Year\",\nwhich is displayed in a label that is rotated 315 degrees\nas in the <a href=\"http://docs.sencha.com/ext-js/4-2/#!/example/charts/Area.html\">Area Chart</a> example.\nThis provides a visually attractive way to fit\nlong labels on a chart.</p>\n\n<p>The bottom (x) axis is defined as a Category axis.\nThe title of the axis is \"Month of the Year\",\nwhich is displayed in a label that is rotated 315 degrees,\nso that the longer month titles are angled\nso that they fit in a smaller horizontal space.</p>\n\n<p>To [do what?], add a grid config similar to the following:</p>\n\n<pre><code>grid: {\n    odd: {\n        opacity: 1,\n        fill: '#ddd',\n        stroke: '#bbb',\n        'stroke-width': 1\n    }\n},\n</code></pre>\n\n<h3>Creating and defining the Series</h3>\n\n<p>Series are the central element of a chart --\nthe line, bars, pie image, and so forth.\nOne chart can contain multiple Series\nthat can be the same or different types of Series.\nThe Charting API supports the following types of Series:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.chart.series.Series\" rel=\"Ext.chart.series.Series\" class=\"docClass\">Ext.chart.series.Series</a> -- abstract class for logic common to all chart series</li>\n<li><a href=\"#!/api/Ext.chart.series.Area\" rel=\"Ext.chart.series.Area\" class=\"docClass\">Ext.chart.series.Area</a> -- creates a Stacked Area Chart</li>\n<li><a href=\"#!/api/Ext.chart.series.Bar\" rel=\"Ext.chart.series.Bar\" class=\"docClass\">Ext.chart.series.Bar</a> -- creates a Bar Chart</li>\n<li><a href=\"#!/api/Ext.chart.series.Cartesian\" rel=\"Ext.chart.series.Cartesian\" class=\"docClass\">Ext.chart.series.Cartesian</a> -- base class for series implementations\nthat plot values using x/y coordinates\n(ref page lacks content)</li>\n<li><a href=\"#!/api/Ext.chart.series.Column\" rel=\"Ext.chart.series.Column\" class=\"docClass\">Ext.chart.series.Column</a> -- creates a Column Chart</li>\n<li><a href=\"#!/api/Ext.chart.series.Gauge\" rel=\"Ext.chart.series.Gauge\" class=\"docClass\">Ext.chart.series.Gauge</a> -- creates a Gauge Chart</li>\n<li><a href=\"#!/api/Ext.chart.series.Line\" rel=\"Ext.chart.series.Line\" class=\"docClass\">Ext.chart.series.Line</a> -- creates a Line Chart</li>\n<li><a href=\"#!/api/Ext.chart.series.Pie\" rel=\"Ext.chart.series.Pie\" class=\"docClass\">Ext.chart.series.Pie</a> -- creates a Pie Chart</li>\n<li><a href=\"#!/api/Ext.chart.series.Scatter\" rel=\"Ext.chart.series.Scatter\" class=\"docClass\">Ext.chart.series.Scatter</a> -- creates a Scatter Chart</li>\n</ul>\n\n\n<p>A simple definition of a Series looks like the following.\nThe <code>type</code> config defines the Series being used.</p>\n\n<pre><code>// Add the Area Series\nseries: [{\n    type: 'area',\n    highlight: true,\n    axis: 'left',\n    xField: 'name',\n    yField: ['data1', 'data2', 'data3'],\n    style: {\n        opacity: 0.93\n    }\n}]\n</code></pre>\n\n<h4>Line series</h4>\n\n<p><a href=\"http://docs.sencha.com/extjs/4.2.0/#!/example/charts/Line.html\">Line Chart</a>\nshows a Chart with three line Series, one of which is filled.</p>\n\n<p><a href=\"http://docs.sencha.com/extjs/4.2.0/#!/example/charts/Charts.html\">Themed Line Charts</a>\nillustrates some different stylings that can be used with Line Charts.</p>\n\n<p>The <a href=\"http://docs.sencha.com/extjs/4.2.0/#!/example/charts/LiveUpdates.html\">Live Updated Chart</a>\nuses three Line Series that</p>\n\n<p>The <a href=\"http://docs.sencha.com/extjs/4.2.0/#!/example/charts/LiveAnimated.html\">Live Animated Chart</a>\nis a slightly different presentation.</p>\n\n<h4>Area Series</h4>\n\n<p>Stacked Area Charts are Class <a href=\"#!/api/Ext.chart.series.Area\" rel=\"Ext.chart.series.Area\" class=\"docClass\">Ext.chart.series.Area</a>.</p>\n\n<p>An example of a fairly simple Area Chart can be viewed here:</p>\n\n<p><a href=\"http://docs.sencha.com/extjs/4.2.0/#!/example/charts/Area.html\">Area Chart</a></p>\n\n<p>Some interesting things to note:</p>\n\n<ul>\n<li>The <code>legend</code> position (bottom) is defined for the Chart itself;\nit is then populated from the same <code>fields</code> definitions\nused for the <code>left</code> axis.</li>\n<li>This chart is using the default color palette provided by the Chart class.</li>\n<li>The style for the chart is set to use #fff (white) as the background color;\nthe default is for it to be transparent.\nNote that, when you set the CSS Theme to \"Accessibility\" or \"Aria\"\n(which provides a black surface),\nthe background of the area chart remains white\nwhereas the code examples that do not set this config\nhave a transparent background\nand pick up the dark background with the \"Accessibility\" or \"Aria\" CSS Theme.\nFor example, see the\n<a href=\"http://docs.sencha.com/extjs/4.2.0/#!/example/charts/TipsChart.html\">Tips Example</a></li>\n</ul>\n\n\n<p><a href=\"http://docs.sencha.com/extjs/4.2.0/#!/example/charts/AreaBrowserStats.html\">Custom Area Charts</a>\nis a more sophisticated area chart\nthat uses custom gradients and an interactive legend.</p>\n\n<h4>Bar Series</h4>\n\n<p>A Bar Series represents the data with horizontal lines.</p>\n\n<p>An example of a basic Bar Chart is\n<a href=\"http://docs.sencha.com/extjs/4.2.0/#!/example/charts/AreaBrowserStats.html\">Bar Charts</a>.</p>\n\n<p>The <a href=\"http://docs.sencha.com/extjs/4.2.0/#!/example/charts/BarRenderer.html\">Bar Renderer</a>\nexample displays a horizontal bar series\nwith a bar renderer that modifies the color of each bar.</p>\n\n<p>The <a href=\"http://docs.sencha.com/extjs/4.2.0/#!/example/charts/StackedBar.html\">Stacked Bar Chart</a>\nillustrates how to create a stacked bar chart.</p>\n\n<p>The <a href=\"http://docs.sencha.com/extjs/4.2.0/#!/example/charts/GroupedBar.html\">Grouped Bar</a> example\ndisplays information for three different sets of data\nrepresented by three different bars per month.\nClicking on an element in the legend\ncauses one set of bars to disappear/reappear in the graph.</p>\n\n<!-- <a href=\"#!/api/Ext.util.Format-method-numberRenderer\" rel=\"Ext.util.Format-method-numberRenderer\" class=\"docClass\">Ext.util.Format.numberRenderer</a> method in the label to ?? -->\n\n\n<h4>Column Series</h4>\n\n<p>A Column Series is similar to a Bar Series\nexcept that the columns are vertical from the x axis.\n<a href=\"http://docs.sencha.com/extjs/4.2.0/#!/example/charts/Column.html\">Column Chart</a>\nshows a basic Column Chart.</p>\n\n<p><a href=\"http://docs.sencha.com/extjs/4.2.0/#!/example/charts/Column2.html\">Column Custom Background</a>\nis a Column Chart that customizes the colors used.</p>\n\n<p>The <a href=\"http://docs.sencha.com/extjs/4.2.0/#!/example/charts/ReloadChart.html\">Reload Column Chart</a>\nexample is a basic Column Chart that animates\nwhen the data set is refreshed.</p>\n\n<h4>Pie Series</h4>\n\n<p><a href=\"http://docs.sencha.com/extjs/4.2.0/#!/example/charts/Pie.html\">Pie Chart Example</a>\nshows a basic pie Series that uses the standard color scheme.</p>\n\n<p><a href=\"http://docs.sencha.com/extjs/4.2.0/#!/example/charts/PieRenderer.html\">Custom Pie Chart</a>\nillustrates a pie chart where the radius of the pie wedges varies.\nNote also the renderer that is defined\nto change the colors of the wedges.</p>\n\n<h4>Radar Series</h4>\n\n<p><a href=\"http://docs.sencha.com/extjs/4.2.0/#!/example/charts/Radar.html\">Radar Charts</a>\nshows a basic Radar Series.</p>\n\n<p><a href=\"http://docs.sencha.com/extjs/4.2.0/#!/example/charts/RadarFill.html\">Filled Radar Charts</a>\nis a chart with three Radar Series, each of which is filled with a different color.</p>\n\n<h4>Scatter Charts</h4>\n\n<p>The <a href=\"http://docs.sencha.com/extjs/4.2.0/#!/example/charts/ScatterRenderer.html\">Scatter Renderer</a>\nexample uses a renderer to dynamically change\nthe size and color of the items based on the data.</p>\n\n<h4>Gauge Charts</h4>\n\n<p>The <a href=\"http://docs.sencha.com/extjs/4.2.0/#!/example/charts/Gauge.html\">Gauge</a> example\nuses three Gauge Series.</p>\n\n<h4>Combination Charts</h4>\n\n<p>One chart can contain multiple Series\nof the same of different <code>type</code>,\nand any Container may include a chart\nalong with other components.</p>\n\n<p>The <a href=\"http://docs.sencha.com/extjs/4.2.0/#!/example/charts/Mixed.html\">Mixed Charts</a> example\nshows a chart that uses a Line Chart and a Column Chart.</p>\n\n<p>The <a href=\"http://docs.sencha.com/extjs/4.2.0/#!/example/charts/TipsChart.html\">Rich Tips</a>\nexample is a Line Chart that uses a Pie Chart\nto display detailed information for each month\nwhen you mouse over the datapoint fo the month.</p>\n\n<p>The <a href=\"http://docs.sencha.com/extjs/4.2.0/#!/example/charts/FormDashboard.html\">Complex Dashboard</a>\nexample sows a grid\nthat includes a Bar Chart and a Radar Chart.</p>\n\n<h3>Adding Mixins</h3>\n\n<ul>\n<li><a href=\"#!/api/Ext.chart.Label\" rel=\"Ext.chart.Label\" class=\"docClass\">Ext.chart.Label</a> -- label creation for the Series</li>\n<li><a href=\"#!/api/Ext.chart.Highlight\" rel=\"Ext.chart.Highlight\" class=\"docClass\">Ext.chart.Highlight</a> -- highlighting functionality for Series</li>\n<li><a href=\"#!/api/Ext.chart.Callout\" rel=\"Ext.chart.Callout\" class=\"docClass\">Ext.chart.Callout</a> -- callout functionality for Series</li>\n</ul>\n\n\n<h4>Labels</h4>\n\n<p>Labels can be added to an axis or a series.\nThe <code>label</code> config defines the style of the label\n(position, font, color, and so forth);\nthe actual content of the label is defined with the\n<code>title</code> config.  For example:</p>\n\n<pre><code>series: [{\n    type: \"line\",\n    title: \"LineSeries\",\n    xField: \"x\",\n    yField: \"y\",\n    label: {\n        field: \"y\",\n        display: \"under\",\n        color: \"#00FF00\"\n        //, contrast : true\n    }\n],\n</code></pre>\n\n<ul>\n<li><a href=\"#!/api/Ext.chart.Label\" rel=\"Ext.chart.Label\" class=\"docClass\">Ext.chart.Label</a> -- label creation for the Series</li>\n</ul>\n\n\n<h4>Highlights</h4>\n\n<ul>\n<li><a href=\"#!/api/Ext.chart.Highlight\" rel=\"Ext.chart.Highlight\" class=\"docClass\">Ext.chart.Highlight</a> -- highlighting functionality for Series</li>\n</ul>\n\n\n<h4>Callouts</h4>\n\n<ul>\n<li><a href=\"#!/api/Ext.chart.Callout\" rel=\"Ext.chart.Callout\" class=\"docClass\">Ext.chart.Callout</a> -- callout functionality for Series</li>\n</ul>\n\n\n<h2 id='charting-section-7'>Customizing the Chart's Theme</h2>\n\n<p><a href=\"#!/api/Ext.chart.theme.Theme\" rel=\"Ext.chart.theme.Theme\" class=\"docClass\">Ext.chart.theme.Theme</a> provides Chart theming,\nwhich is implemented as a callback\nthat is executed right after the class is created.</p>\n\n<p>You can use the themeAttrs.colors property to change color of columns.</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.chart.Chart\" rel=\"Ext.chart.Chart\" class=\"docClass\">Ext.chart.Chart</a></li>\n</ul>\n\n\n<h3>Other Chart Elements</h3>\n\n<ul>\n<li><a href=\"#!/api/Ext.chart.Legend\" rel=\"Ext.chart.Legend\" class=\"docClass\">Ext.chart.Legend</a> -- defines a legend for a Series</li>\n<li><a href=\"#!/api/Ext.chart.LegendItem\" rel=\"Ext.chart.LegendItem\" class=\"docClass\">Ext.chart.LegendItem</a> -- defines a legend item</li>\n<li><a href=\"#!/api/Ext.chart.Mask\" rel=\"Ext.chart.Mask\" class=\"docClass\">Ext.chart.Mask</a> -- select a region of a chart,\nallowing the user to perform actions such as panning and zooming on that region</li>\n<li><a href=\"#!/api/Ext.chart.Navigation\" rel=\"Ext.chart.Navigation\" class=\"docClass\">Ext.chart.Navigation</a> -- handles panning and zooming activities</li>\n<li><a href=\"#!/api/Ext.chart.Tip\" rel=\"Ext.chart.Tip\" class=\"docClass\">Ext.chart.Tip</a> -- provides tips for a Series</li>\n</ul>\n\n\n<h2 id='charting-section-8'>Using Sencha Architect to Implement Charts</h2>\n\n<p>Ext JS Charts can be implemented using Sencha Architect.\nThe general process is:</p>\n\n<ol>\n<li>Drag a baseline Chart type from the Toolbox to the Canvas.\nThis gives you an appropriate set of axes\nwith one Series,\nusing an internal dummy Store for the data.</li>\n<li>Create a Model and Store for your data\nand bind the Store to the Chart using the Store config\nin the Config Panel.</li>\n<li>Modify the axes and series\nto point to the appropriate fields;\nfollow the instructions in the API documentation.\nin your Store's Model.\nto point to the appropriate fields on your Store's model.</li>\n<li>If you want additional Series in your chart,\ndrag the appropriate type(s) of Series onto your Chart in the Canvas\nthe bind the appropriate Store to each Series\nand do other necessary configs.</li>\n</ol>\n\n\n<p>For styling and other advanced Chart facilities,\nyou must manually create object configs\nfollowing the instructions in the API reference docs.</p>\n"});